try 
{
    # Vérifie si le module ImportExcel est installé, sinon l'installe
    if (-not (Get-Module -ListAvailable -Name ImportExcel)) {
        Write-Host "Installation du module ImportExcel..."
        Install-Module -Name ImportExcel -Force -Scope CurrentUser
    }

    # Fonction pour récupérer les utilisateurs avec "archive" dans leur nom
    function Get-AllArchiveUsers {
        $ExportAllArchiveUsers = @() # Initialise un tableau vide
    
        # Récupère tous les utilisateurs "archive" et ajoute une colonne ArchiveDate
        $AllArchiveUsers = Get-MgUser -All -Property UserPrincipalName, DisplayName, Surname, createdDateTime | 
            Where-Object { $_.UserPrincipalName -match "archive" -or $_.DisplayName -match "archive" } |
            Select-Object *, @{
                Name = 'ArchiveDate';
                Expression = {
                    try {
                        # Extrait la date du UserPrincipalName et la formate
                        $matche = ($_.UserPrincipalName -split '_')[1]
                        $date = [DateTime]::ParseExact($matche, "yyyyMMdd", $null)
                        return $date.ToString("dd/MM/yyyy")
                    }
                    catch {
                        $null
                    }
                }
            }
    
        # Crée un objet personnalisé pour chaque utilisateur
        foreach ($User in $AllArchiveUsers) {
            $ExportArchiveUser = [PSCustomObject]@{
                UserPrincipalName = $User.UserPrincipalName
                DisplayName = $User.DisplayName
                Surname = $User.Surname
                ArchiveDate = $User.ArchiveDate
            }
            $ExportAllArchiveUsers += $ExportArchiveUser
        }
    
        Write-Host -ForegroundColor Green "Export de $($ExportAllArchiveUsers.Count) comptes archives"
        return $ExportAllArchiveUsers
    }
    
    # Fonction pour récupérer les utilisateurs avec "redirection" dans leur nom
    function Get-AllRedirectionUsers {
        $ExportAllRedirectionUsers = @() # Initialise un tableau vide
        # Récupère tous les utilisateurs "redirection"
        $AllRedirectionUsers = Get-MgUser -All -Property UserPrincipalName, DisplayName,createdDateTime | 
        Select-Object UserPrincipalName, DisplayName, createdDateTime | 
        Where-Object {($_.UserPrincipalName -match "redirection" -or $_.DisplayName -match "redirection")}
        
        # Crée un objet personnalisé pour chaque utilisateur
        foreach ($AllRedirectionUser in $AllRedirectionUsers) {
            $ExportRedirectionUser = [PSCustomObject]@{    
                UserPrincipalName = $AllRedirectionUser.UserPrincipalName
                DisplayName = $AllRedirectionUser.DisplayName
                CreatedDateTime = try{
                    ($AllRedirectionUser.createdDateTime).ToString("dd/MM/yyyy")
                } catch{Write-Host "[ERREUR] : conversion format"}
            }
            $ExportAllRedirectionUsers += $ExportRedirectionUser    
        }
        Write-Host -ForegroundColor Green "Export de $($ExportAllRedirectionUsers.Count) comptes redirection"
        return $ExportAllRedirectionUsers
    }

    # Fonction pour se connecter à Microsoft Graph
    function connectgraph {
        connect-mggraph -Scopes "User.Read.All"
    }

    # Fonction pour importer les modules nécessaires
    function importmodule {
        import-module -name "Microsoft.Graph.Users"
        Import-Module -Name ImportExcel
    }

    # Fonction principale qui orchestre tout le processus
    function main {
        $Today = Get-Date -UFormat "%Y-%m-%d" # Obtient la date du jour
        connectgraph # Connexion à Graph
        importmodule # Import des modules
        
        # Définit le chemin du fichier Excel
        $ExportPath = "D:\Scripts\HygieneO365\ExportAllUsers$($Today).xlsx"

        # Récupère les données des deux types d'utilisateurs
        $ArchiveUsers = Get-AllArchiveUsers
        $RedirectionUsers = Get-AllRedirectionUsers

        # Export vers Excel dans deux onglets différents
        $ArchiveUsers | Export-Excel -Path $ExportPath -WorksheetName 'Archives' -AutoSize -TableName 'Archives'
        $RedirectionUsers | Export-Excel -Path $ExportPath -WorksheetName 'Redirections' -AutoSize -TableName 'Redirections'

        Write-Host -ForegroundColor Green "Export terminé vers $ExportPath"
    }

    # Exécution de la fonction principale
    main
}
catch 
{
    # Gestion des erreurs globales
    Write-Host -ForegroundColor Red "[ERREUR] : Une erreur lors de l'appel des fonctions : $($_.Exception)"
}
